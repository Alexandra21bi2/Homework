#include <iostream>
#include <cmath>

int discr(int k, int l, int m) {
    return l * l - 4 * k * m; // Рассчитываем дискриминант
}
int root1(int k, int l, int m) {
    return (((-l) + sqrt(discr(k, l, m))) / (2 * k));//рассчитываем первый корень уравнения
}
int root2(int k, int l, int m) {
    return (((-l) - sqrt(discr(k, l, m))) / (2 * k));//рассчитываем второй корень уравнения
}
int main()
{
    int a, b, c; // Объявляем переменные 

    std::cout << "Enter a: "; // Просим пользователя ввести данные
    std::cin >> a; //получаем число и присваиваем его значение переменной 
    std::cout << "Enter b: ";//Просим пользователя ввести число
    std::cin >> b; //получаем число и присваиваем его значение переменной 
    std::cout << "Enter c: ";//Просим пользователя ввести число
    std::cin >> c; //получаем число и присваиваем его значение переменной 
    int D = discr(a, b, c); //вызываем функцию discr() со значениями k=a, l=b, m=c
    int x1 = root1(a, b, c);//вызываем функцию root1() со значениями k=a, l=b, m=c
    int x2 = root2(a, b, c);//вызываем функцию root2() со значениями k=a, l=b, m=c
    //рассматриваем различные исходы для возможных значений дискриминанта
    if (D > 0) // Условие при дискриминанте больше нуля
    {
        std::cout << "x1 = " << x1 << std::endl;
        std::cout << "x2 = " << x2 << std::endl;
    }
    if (D == 0) // Условие для дискриминанта равного нулю
    {
        x1 = -(b / (2 * a));
    std:: cout << "x1 = x2 = " << x1<< std::endl;
    }
    if (D < 0) // Условие при дискриминанте меньше нуля
        std::cout << "D < 0, error" << std::endl;
}